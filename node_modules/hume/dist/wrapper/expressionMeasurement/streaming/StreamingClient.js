"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.StreamClient = void 0;
const serializers = __importStar(require("../../../serialization"));
const StreamSocket_1 = require("./StreamSocket");
const ws_1 = __importDefault(require("ws"));
class StreamClient {
    constructor(_options) {
        this._options = _options;
    }
    connect(args) {
        const websocket = new ws_1.default(`wss://api.hume.ai/v0/stream/models`, {
            headers: {
                "X-Hume-Api-Key": typeof this._options.apiKey === "string" ? this._options.apiKey : "",
            },
            timeout: 10,
        });
        websocket.addEventListener("open", (event) => {
            var _a;
            (_a = args.onOpen) === null || _a === void 0 ? void 0 : _a.call(args, event);
        });
        websocket.addEventListener("error", (e) => {
            var _a;
            (_a = args.onError) === null || _a === void 0 ? void 0 : _a.call(args, {
                code: e.type,
                error: e.message,
            });
        });
        websocket.addEventListener("message", ({ data }) => __awaiter(this, void 0, void 0, function* () {
            parse(data, {
                onMessage: args.onMessage,
                onError: args.onError,
            });
        }));
        websocket.addEventListener("close", (event) => {
            var _a;
            (_a = args.onClose) === null || _a === void 0 ? void 0 : _a.call(args, event);
        });
        return new StreamSocket_1.StreamSocket({
            websocket,
            streamWindowMs: args.streamWindowMs,
            config: args.config,
        });
    }
}
exports.StreamClient = StreamClient;
function parse(data, args = {}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const message = JSON.parse(data);
        const parsedResponse = yield serializers.expressionMeasurement.stream.StreamBurst.parse(message, {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
        });
        if (parsedResponse.ok) {
            (_a = args.onMessage) === null || _a === void 0 ? void 0 : _a.call(args, parsedResponse.value);
            return parsedResponse.value;
        }
        const parsedError = yield serializers.expressionMeasurement.stream.StreamError.parse(message, {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
        });
        if (parsedError.ok) {
            (_b = args.onError) === null || _b === void 0 ? void 0 : _b.call(args, parsedError.value);
            return parsedError.value;
        }
    });
}
exports.parse = parse;
