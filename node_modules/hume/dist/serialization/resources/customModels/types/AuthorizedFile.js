"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthorizedFile = void 0;
const core = __importStar(require("../../../../core"));
exports.AuthorizedFile = core.serialization.object({
    id: core.serialization.string(),
    name: core.serialization.string().optional(),
    uri: core.serialization.string().optional(),
    uploadUri: core.serialization.property("upload_uri", core.serialization.string().optional()),
    thumbnailUri: core.serialization.property("thumbnail_uri", core.serialization.string().optional()),
    userId: core.serialization.property("user_id", core.serialization.string()),
    dataType: core.serialization.property("data_type", core.serialization.string()),
    createdOn: core.serialization.property("created_on", core.serialization.number().optional()),
    modifiedOn: core.serialization.property("modified_on", core.serialization.number().optional()),
    metadata: core.serialization
        .record(core.serialization.string(), core.serialization.record(core.serialization.string(), core.serialization.unknown()))
        .optional(),
    humeStorage: core.serialization.property("hume_storage", core.serialization.boolean().optional()),
    humeStorageUploadTimestamp: core.serialization.property("hume_storage_upload_timestamp", core.serialization.number().optional()),
    isSanitized: core.serialization.property("is_sanitized", core.serialization.boolean()),
    isOwnedByReader: core.serialization.property("is_owned_by_reader", core.serialization.boolean()),
    isLinkedToPubliclyShared: core.serialization.property("is_linked_to_publicly_shared", core.serialization.boolean().optional()),
    isLinkedToHumeModel: core.serialization.property("is_linked_to_hume_model", core.serialization.boolean().optional()),
});
