/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace Models {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Models {
    protected readonly _options: Models.Options;
    constructor(_options?: Models.Options);
    /**
     * Returns 200 if successful
     *
     * @param {Hume.customModels.ModelsListModelsRequest} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.listModels()
     */
    listModels(request?: Hume.customModels.ModelsListModelsRequest, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ModelPage>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Model
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.getModelDetails("id")
     */
    getModelDetails(id: string, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ExternalModel>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Model
     * @param {Hume.customModels.ModelsUpdateModelNameRequest} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.updateModelName("id", {
     *         name: "name"
     *     })
     */
    updateModelName(id: string, request: Hume.customModels.ModelsUpdateModelNameRequest, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ExternalModel>;
    /**
     * Returns 200 if successful
     *
     * @param {Hume.customModels.ModelsListModelVersionsRequest} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.listModelVersions()
     */
    listModelVersions(request?: Hume.customModels.ModelsListModelVersionsRequest, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ExternalModelVersion[]>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Model version
     * @param {Hume.customModels.ModelsGetModelVersionRequest} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.getModelVersion("id")
     */
    getModelVersion(id: string, request?: Hume.customModels.ModelsGetModelVersionRequest, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ExternalModelVersion>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Model Version
     * @param {string} request
     * @param {Models.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.models.updateModelDescription("id", "string")
     */
    updateModelDescription(id: string, request: string, requestOptions?: Models.RequestOptions): Promise<Hume.customModels.ExternalModelVersion>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
