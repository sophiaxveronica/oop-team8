/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import * as fs from "fs";
export declare namespace Datasets {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Datasets {
    protected readonly _options: Datasets.Options;
    constructor(_options?: Datasets.Options);
    /**
     * Returns 200 if successful
     *
     * @param {Hume.customModels.DatasetsListDatasetsRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.listDatasets()
     */
    listDatasets(request?: Hume.customModels.DatasetsListDatasetsRequest, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.DatasetPage>;
    /**
     * Returns 201 if successful
     *
     * @param {File | fs.ReadStream | undefined} featureTypes
     * @param {File | fs.ReadStream} labelsFile
     * @param {Hume.customModels.DatasetsCreateDatasetRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.createDataset(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), {
     *         name: "name"
     *     })
     */
    createDataset(featureTypes: File | fs.ReadStream | undefined, labelsFile: File | fs.ReadStream, request: Hume.customModels.DatasetsCreateDatasetRequest, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.ReturnDataset>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.getDataset("id")
     */
    getDataset(id: string, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.ReturnDataset>;
    /**
     * Returns 200 if successful
     *
     * @param {File | fs.ReadStream | undefined} featureTypes
     * @param {File | fs.ReadStream} labelsFile
     * @param {string} id
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.createDatasetVersion(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"), "id")
     */
    createDatasetVersion(featureTypes: File | fs.ReadStream | undefined, labelsFile: File | fs.ReadStream, id: string, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.ReturnDataset[]>;
    /**
     * Returns 204 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.deleteDataset("id")
     */
    deleteDataset(id: string, requestOptions?: Datasets.RequestOptions): Promise<void>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset
     * @param {Hume.customModels.DatasetsListDatasetVersionsRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.listDatasetVersions("id")
     */
    listDatasetVersions(id: string, request?: Hume.customModels.DatasetsListDatasetVersionsRequest, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.DatasetVersionPage>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset
     * @param {Hume.customModels.DatasetsListDatasetFilesRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.listDatasetFiles("id")
     */
    listDatasetFiles(id: string, request?: Hume.customModels.DatasetsListDatasetFilesRequest, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.FilePage[]>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset version
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.getDatasetVersion("id")
     */
    getDatasetVersion(id: string, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.DatasetLabels>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a Dataset version
     * @param {Hume.customModels.DatasetsListDatasetVersionFilesRequest} request
     * @param {Datasets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.datasets.listDatasetVersionFiles("id")
     */
    listDatasetVersionFiles(id: string, request?: Hume.customModels.DatasetsListDatasetVersionFilesRequest, requestOptions?: Datasets.RequestOptions): Promise<Hume.customModels.FilePage[]>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
