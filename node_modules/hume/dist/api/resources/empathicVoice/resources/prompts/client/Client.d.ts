/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace Prompts {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Prompts {
    protected readonly _options: Prompts.Options;
    constructor(_options?: Prompts.Options);
    /**
     * @param {Hume.empathicVoice.PromptsListPromptsRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.listPrompts()
     */
    listPrompts(request?: Hume.empathicVoice.PromptsListPromptsRequest, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedPrompts>;
    /**
     * @param {Hume.empathicVoice.PostedPrompt} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.createPrompt({
     *         name: "name",
     *         text: "text"
     *     })
     */
    createPrompt(request: Hume.empathicVoice.PostedPrompt, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPrompt | undefined>;
    /**
     * @param {string} id - Identifier for a tool. Formatted as a UUID.
     * @param {Hume.empathicVoice.PromptsListPromptVersionsRequest} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.listPromptVersions("id")
     */
    listPromptVersions(id: string, request?: Hume.empathicVoice.PromptsListPromptVersionsRequest, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedPrompts>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedPromptVersion} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.createPromptVerison("id", {
     *         text: "text"
     *     })
     */
    createPromptVerison(id: string, request: Hume.empathicVoice.PostedPromptVersion, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPrompt | undefined>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.deletePrompt("id")
     */
    deletePrompt(id: string, requestOptions?: Prompts.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedPromptName} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.updatePromptName("string", {
     *         name: "string"
     *     })
     */
    updatePromptName(id: string, request: Hume.empathicVoice.PostedPromptName, requestOptions?: Prompts.RequestOptions): Promise<string>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {number} version - Version number for a prompt. Version numbers should be integers.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.getPromptVersion("id", 1)
     */
    getPromptVersion(id: string, version: number, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPrompt | undefined>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {number} version - Version number for a prompt. Version numbers should be integers.
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.deletePromptVersion("id", 1)
     */
    deletePromptVersion(id: string, version: number, requestOptions?: Prompts.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a prompt. Formatted as a UUID.
     * @param {number} version - Version number for a prompt. Version numbers should be integers.
     * @param {Hume.empathicVoice.PostedPromptVersionDescription} request
     * @param {Prompts.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.prompts.updatePromptDescription("id", 1)
     */
    updatePromptDescription(id: string, version: number, request?: Hume.empathicVoice.PostedPromptVersionDescription, requestOptions?: Prompts.RequestOptions): Promise<Hume.empathicVoice.ReturnPrompt | undefined>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
