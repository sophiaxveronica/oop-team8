"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamSocket = void 0;
const serializers = __importStar(require("../../../../serialization"));
class StreamSocket {
    constructor({ websocket }) {
        this.websocket = websocket;
    }
    /**
     * Send audio input
     */
    sendAudioInput(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "audio_input" }, message));
        });
    }
    /**
     * Send session settings
     */
    sendSessionSettings(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "session_settings" }, message));
        });
    }
    /**
     * Send assistant input
     */
    sendAssistantInput(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "assistant_input" }, message));
        });
    }
    /**
     * Send pause assistant message
     */
    pauseAssistant(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "pause_assistant_message" }, message));
        });
    }
    /**
     * Send resume assistant message
     */
    resumeAssistant(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "resume_assistant_message" }, message));
        });
    }
    /**
     * Send tool response message
     */
    sendToolResponseMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "tool_response" }, message));
        });
    }
    /**
     * Send tool error message
     */
    sendToolErrorMessage(message) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson(Object.assign({ type: "tool_error" }, message));
        });
    }
    /**
     * Send text input
     */
    sendTextInput(text) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendJson({
                type: "user_input",
                text,
            });
        });
    }
    /**
     * Closes the underlying socket.
     */
    close() {
        this.websocket.close();
    }
    sendJson(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tillSocketOpen();
            const jsonPayload = yield serializers.empathicVoice.PublishEvent.jsonOrThrow(payload, {
                unrecognizedObjectKeys: "strip",
            });
            this.websocket.send(JSON.stringify(jsonPayload));
        });
    }
    tillSocketOpen() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.websocket.readyState === 1) {
                return this.websocket;
            }
            return new Promise((resolve, reject) => {
                this.websocket.addEventListener("open", () => {
                    resolve(this.websocket);
                });
                this.websocket.addEventListener("error", (event) => {
                    reject(event);
                });
            });
        });
    }
}
exports.StreamSocket = StreamSocket;
