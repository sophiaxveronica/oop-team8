import * as Hume from "../../../api";
import * as core from "../../../core";
export declare namespace ChatClient {
    interface Options {
        apiKey?: core.Supplier<string | undefined>;
        secretKey?: core.Supplier<string | undefined>;
    }
    interface ConnectArgs {
        /** The ID of the configuration. */
        configId?: string;
        /** The version of the configuration. */
        configVersion?: string;
        /** The ID of a chat group, used to resume a previous chat. */
        resumedChatGroupId?: string;
        onOpen?: () => void;
        onMessage?: (message: Hume.empathicVoice.SubscribeEvent) => void;
        onError?: (error: Hume.empathicVoice.Error_) => void;
        onClose?: () => void;
    }
}
export declare class ChatClient {
    protected readonly _options: ChatClient.Options;
    constructor(_options: ChatClient.Options);
    connect(args?: ChatClient.ConnectArgs): Promise<Hume.empathicVoice.StreamSocket>;
    private fetchAccessToken;
}
export declare function parse(data: any, args?: {
    onMessage?: (message: Hume.empathicVoice.SubscribeEvent) => void;
    onError?: (error: Hume.empathicVoice.Error_) => void;
}): Promise<Hume.empathicVoice.SubscribeEvent | undefined>;
