"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.ChatClient = void 0;
const Hume = __importStar(require("../../../api"));
const serializers = __importStar(require("../../../serialization"));
const core = __importStar(require("../../../core"));
const errors = __importStar(require("../../../errors"));
const qs_1 = __importDefault(require("qs"));
const base64Encode_1 = require("../../base64Encode");
class ChatClient {
    constructor(_options) {
        this._options = _options;
    }
    connect(args = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParams = {};
            queryParams["accessToken"] = yield this.fetchAccessToken();
            queryParams["apiKey"] = core.Supplier.get(this._options.apiKey);
            if (args.configId != null) {
                queryParams["config_id"] = args.configId;
            }
            if (args.configVersion != null) {
                queryParams["config_version"] = args.configVersion;
            }
            if (args.resumedChatGroupId != null) {
                queryParams["resumed_chat_group_id"] = args.resumedChatGroupId;
            }
            const websocket = yield core.connect(`wss://api.hume.ai/v0/evi/chat?${qs_1.default.stringify(queryParams)}`);
            websocket.addEventListener("open", () => {
                var _a;
                (_a = args.onOpen) === null || _a === void 0 ? void 0 : _a.call(args);
            });
            websocket.addEventListener("error", (e) => {
                var _a;
                (_a = args.onError) === null || _a === void 0 ? void 0 : _a.call(args, {
                    type: "error",
                    code: e.type,
                    message: e.message,
                    slug: "websocket-error",
                });
            });
            websocket.addEventListener("message", ({ data }) => __awaiter(this, void 0, void 0, function* () {
                parse(data, {
                    onMessage: args.onMessage,
                    onError: args.onError,
                });
            }));
            websocket.addEventListener("close", () => {
                var _a;
                (_a = args.onClose) === null || _a === void 0 ? void 0 : _a.call(args);
            });
            return new Hume.empathicVoice.StreamSocket({
                websocket,
            });
        });
    }
    fetchAccessToken() {
        return __awaiter(this, void 0, void 0, function* () {
            const apiKey = yield core.Supplier.get(this._options.apiKey);
            const secretKey = yield core.Supplier.get(this._options.secretKey);
            const authString = `${apiKey}:${secretKey}`;
            const encoded = (0, base64Encode_1.base64Encode)(authString);
            const response = yield core.fetcher({
                url: "https://api.hume.ai/oauth2-cc/token",
                method: "POST",
                contentType: "application/x-www-form-urlencoded",
                headers: {
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                    Authorization: `Basic ${encoded}`,
                },
                body: new URLSearchParams({
                    grant_type: "client_credentials",
                }).toString(),
            });
            if (!response.ok) {
                if (response.error.reason === "status-code") {
                    throw new errors.HumeError({
                        statusCode: response.error.statusCode,
                        body: response.error.body,
                    });
                }
                switch (response.error.reason) {
                    case "non-json":
                        throw new errors.HumeError({
                            statusCode: response.error.statusCode,
                            body: response.error.rawBody,
                        });
                    case "timeout":
                        throw new errors.HumeTimeoutError();
                    case "unknown":
                        throw new errors.HumeError({
                            message: response.error.errorMessage,
                        });
                }
            }
            const token = (yield response.body).access_token;
            return token;
        });
    }
}
exports.ChatClient = ChatClient;
function parse(data, args = {}) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const message = JSON.parse(data);
        const parsedResponse = yield serializers.empathicVoice.SubscribeEvent.parse(message, {
            unrecognizedObjectKeys: "passthrough",
            allowUnrecognizedUnionMembers: true,
            allowUnrecognizedEnumValues: true,
            breadcrumbsPrefix: ["response"],
        });
        if (parsedResponse.ok) {
            (_a = args.onMessage) === null || _a === void 0 ? void 0 : _a.call(args, parsedResponse.value);
            if (parsedResponse.value.type === "error") {
                (_b = args.onError) === null || _b === void 0 ? void 0 : _b.call(args, parsedResponse.value);
            }
            return parsedResponse.value;
        }
    });
}
exports.parse = parse;
