/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
export declare namespace Configs {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Configs {
    protected readonly _options: Configs.Options;
    constructor(_options?: Configs.Options);
    /**
     * @param {Hume.empathicVoice.ConfigsListConfigsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.listConfigs()
     */
    listConfigs(request?: Hume.empathicVoice.ConfigsListConfigsRequest, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedConfigs>;
    /**
     * @param {Hume.empathicVoice.PostedConfig} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.createConfig({
     *         name: "name"
     *     })
     */
    createConfig(request: Hume.empathicVoice.PostedConfig, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {Hume.empathicVoice.ConfigsListConfigVersionsRequest} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.listConfigVersions("id")
     */
    listConfigVersions(id: string, request?: Hume.empathicVoice.ConfigsListConfigVersionsRequest, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnPagedConfigs>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigVersion} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.createConfigVersion("id")
     */
    createConfigVersion(id: string, request?: Hume.empathicVoice.PostedConfigVersion, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfig("id")
     */
    deleteConfig(id: string, requestOptions?: Configs.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {Hume.empathicVoice.PostedConfigName} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigName("string", {
     *         name: "string"
     *     })
     */
    updateConfigName(id: string, request: Hume.empathicVoice.PostedConfigName, requestOptions?: Configs.RequestOptions): Promise<string>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {number} version - Version number for a config. Version numbers should be integers.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.getConfigVersion("id", 1)
     */
    getConfigVersion(id: string, version: number, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {number} version - Version number for a config. Version numbers should be integers.
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.deleteConfigVersion("id", 1)
     */
    deleteConfigVersion(id: string, version: number, requestOptions?: Configs.RequestOptions): Promise<void>;
    /**
     * @param {string} id - Identifier for a config. Formatted as a UUID.
     * @param {number} version - Version number for a config. Version numbers should be integers.
     * @param {Hume.empathicVoice.PostedConfigVersionDescription} request
     * @param {Configs.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.empathicVoice.configs.updateConfigDescription("id", 1)
     */
    updateConfigDescription(id: string, version: number, request?: Hume.empathicVoice.PostedConfigVersionDescription, requestOptions?: Configs.RequestOptions): Promise<Hume.empathicVoice.ReturnConfig>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
