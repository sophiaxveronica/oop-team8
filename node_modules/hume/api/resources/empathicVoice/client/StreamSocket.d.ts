import * as Hume from "../../../../api";
export declare namespace StreamSocket {
    interface Args {
        websocket: any;
    }
}
export declare class StreamSocket {
    readonly websocket: any;
    constructor({ websocket }: StreamSocket.Args);
    /**
     * Send audio input
     */
    sendAudioInput(message: Omit<Hume.empathicVoice.AudioInput, "type">): Promise<void>;
    /**
     * Send session settings
     */
    sendSessionSettings(message: Omit<Hume.empathicVoice.SessionSettings, "type">): Promise<void>;
    /**
     * Send assistant input
     */
    sendAssistantInput(message: Omit<Hume.empathicVoice.AssistantInput, "type">): Promise<void>;
    /**
     * Send pause assistant message
     */
    pauseAssistant(message: Omit<Hume.empathicVoice.PauseAssistantMessage, "type">): Promise<void>;
    /**
     * Send resume assistant message
     */
    resumeAssistant(message: Omit<Hume.empathicVoice.ResumeAssistantMessage, "type">): Promise<void>;
    /**
     * Send tool response message
     */
    sendToolResponseMessage(message: Omit<Hume.empathicVoice.ToolResponseMessage, "type">): Promise<void>;
    /**
     * Send tool error message
     */
    sendToolErrorMessage(message: Omit<Hume.empathicVoice.ToolErrorMessage, "type">): Promise<void>;
    /**
     * Send text input
     */
    sendTextInput(text: string): Promise<void>;
    /**
     * Closes the underlying socket.
     */
    close(): void;
    private sendJson;
    private tillSocketOpen;
}
