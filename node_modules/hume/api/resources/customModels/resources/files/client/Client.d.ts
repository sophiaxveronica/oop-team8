/**
 * This file was auto-generated by Fern from our API Definition.
 */
/// <reference types="node" />
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Hume from "../../../../../index";
import * as fs from "fs";
export declare namespace Files {
    interface Options {
        environment?: core.Supplier<environments.HumeEnvironment | string>;
        apiKey?: core.Supplier<string | undefined>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
        abortSignal?: AbortSignal;
    }
}
export declare class Files {
    protected readonly _options: Files.Options;
    constructor(_options?: Files.Options);
    /**
     * Returns 200 if successful
     *
     * @param {Hume.customModels.FilesListFilesRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.listFiles()
     */
    listFiles(request?: Hume.customModels.FilesListFilesRequest, requestOptions?: Files.RequestOptions): Promise<Hume.customModels.FilePage>;
    /**
     * Returns 201 if successful
     *
     * @param {Hume.customModels.FileWithAttributesInput[]} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.createFiles([{
     *             file: {
     *                 name: "name",
     *                 humeStorage: true,
     *                 dataType: "data_type"
     *             }
     *         }])
     */
    createFiles(request: Hume.customModels.FileWithAttributesInput[], requestOptions?: Files.RequestOptions): Promise<Hume.customModels.FileWithAttributes[]>;
    /**
     * Upload a file synchronously. Returns 201 if successful. Files must have a name. Files must specify Content-Type. Request bodies, and therefore files, are limited to 100MB
     *
     * @param {File | fs.ReadStream} file
     * @param {File | fs.ReadStream | undefined} attributes
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.uploadFile(fs.createReadStream("/path/to/your/file"), fs.createReadStream("/path/to/your/file"))
     */
    uploadFile(file: File | fs.ReadStream, attributes: File | fs.ReadStream | undefined, requestOptions?: Files.RequestOptions): Promise<Hume.customModels.FileWithAttributes>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a File
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.getFile("id")
     */
    getFile(id: string, requestOptions?: Files.RequestOptions): Promise<Hume.customModels.FileWithAttributes>;
    /**
     * Returns 204 if successful
     *
     * @param {string} id - Hume-generated ID of a File
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.deleteFile("id")
     */
    deleteFile(id: string, requestOptions?: Files.RequestOptions): Promise<void>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a File
     * @param {Hume.customModels.FilesUpdateFileNameRequest} request
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.updateFileName("id", {
     *         name: "name"
     *     })
     */
    updateFileName(id: string, request: Hume.customModels.FilesUpdateFileNameRequest, requestOptions?: Files.RequestOptions): Promise<Hume.customModels.FileWithAttributes>;
    /**
     * Returns 200 if successful
     *
     * @param {string} id - Hume-generated ID of a File
     * @param {Files.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.customModels.files.getFilePredictions("id")
     */
    getFilePredictions(id: string, requestOptions?: Files.RequestOptions): Promise<void>;
    protected _getCustomAuthorizationHeaders(): Promise<{
        "X-Hume-Api-Key": string | undefined;
    }>;
}
