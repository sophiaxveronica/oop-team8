{"version":3,"sources":["../src/lib/audio.ts","../src/lib/client.ts","../src/lib/create-url.ts","../src/lib/errors.ts","../src/models/audio-message.ts","../src/models/json-message.ts","../src/models/assistant-end-message.ts","../src/models/assistant-message.ts","../src/models/transcript-models.ts","../src/models/audio-output-message.ts","../src/models/chat-metadata-message.ts","../src/models/error-message.ts","../src/models/tool-messages.ts","../src/models/user-interruption-message.ts","../src/models/time-slice.ts","../src/models/user-message.ts","../src/utils/safeJson.ts","../src/utils/unwrapJson.ts","../src/lib/message.ts","../src/lib/create-socket-config.ts","../src/models/auth.ts","../src/lib/tts.ts","../src/lib/microphone.ts","../src/lib/fetch-access-token.ts","../src/models/session-settings.ts","../src/models/llm.ts"],"sourcesContent":["export enum MimeType {\n  WEBM = 'audio/webm',\n  MP4 = 'audio/mp4',\n  WAV = 'audio/wav',\n}\n\nexport function arrayBufferToBlob(arrayBuffer: ArrayBuffer, mimeType?: string) {\n  return new Blob([arrayBuffer], { type: mimeType });\n}\n\nexport function base64ToBlob(base64: string, contentType: string) {\n  const binaryString = window.atob(base64);\n  const bytes = new Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  const byteArray = new Uint8Array(bytes);\n  return new Blob([byteArray], { type: contentType });\n}\n\n/**\n * @name getSupportedMimeType\n * @description\n * Returns the supported mime type for the current browser.\n * @returns\n * - `success: true` and `mimeType: MimeType` if the browser supports any of the compatible mime types.\n */\nexport function getSupportedMimeType():\n  | { success: true; mimeType: MimeType }\n  | { success: false; error: Error } {\n  if (typeof MediaRecorder === 'undefined') {\n    return {\n      success: false,\n      error: new Error('MediaRecorder is not supported'),\n    };\n  }\n  if (MediaRecorder.isTypeSupported(MimeType.WEBM)) {\n    return { success: true, mimeType: MimeType.WEBM };\n  }\n  if (MediaRecorder.isTypeSupported(MimeType.MP4)) {\n    return { success: true, mimeType: MimeType.MP4 };\n  }\n  if (MediaRecorder.isTypeSupported(MimeType.WAV)) {\n    return { success: true, mimeType: MimeType.WAV };\n  }\n  return {\n    success: false,\n    error: new Error('Browser does not support any compatible mime types'),\n  };\n}\n","import ReconnectingWebsocket, {\n  type CloseEvent,\n  type ErrorEvent as WebsocketErrorEvent,\n} from 'reconnecting-websocket';\nimport snakecaseKeys from 'snakecase-keys';\n\nimport type { SocketConfig } from './create-socket-config';\nimport { createSocketUrl } from './create-url';\nimport { parseMessageType } from './message';\n\nimport type { ToolError, ToolResponse } from '@/index';\nimport type { AudioMessage } from '@/models/audio-message';\nimport type { JSONMessage } from '@/models/json-message';\nimport { type SessionSettings } from '@/models/session-settings';\n\n/**\n * @name VoiceEventMap\n * @description\n * The event map for the VoiceClient.\n * @type\n * An object with the following properties:\n * - `open` - The event to run when the socket is opened.\n * - `message` - The event to run when a message is received.\n * - `close` - The event to run when the socket is closed.\n * - `error` - The event to run when an error occurs.\n */\nexport type VoiceEventMap = {\n  open?: () => void;\n  message?: (message: JSONMessage | AudioMessage) => void;\n  close?: (event: CloseEvent) => void;\n  error?: (error: Error) => void;\n};\n\nexport class VoiceClient {\n  private socket: ReconnectingWebsocket;\n\n  private url: string;\n\n  private eventHandlers: VoiceEventMap = {};\n\n  private constructor(config: SocketConfig) {\n    this.url = createSocketUrl(config);\n    this.socket = new ReconnectingWebsocket(this.url, [], {\n      startClosed: true,\n      maxRetries: config.reconnectAttempts,\n      debug: config.debug,\n    });\n  }\n\n  /**\n   * @name create\n   * @description\n   * Create a new VoiceClient.\n   * @param config - The configuration for the client.\n   * @returns\n   * A new VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * ```\n   */\n  static create(config: SocketConfig) {\n    return new VoiceClient(config);\n  }\n\n  /**\n   * @name on\n   * @description\n   * Attach events to the client.\n   * @param event - The event to attach to.\n   * @param callback - The callback to run when the event is triggered.\n   * @returns\n   * The VoiceClient instance.\n   * @example\n   * ```ts\n   * const client = VoiceClient.create(config);\n   * client.on('open', () => {\n   *  console.log('Socket opened');\n   * });\n   * ```\n   */\n  on<T extends keyof VoiceEventMap>(event: T, callback: VoiceEventMap[T]) {\n    this.eventHandlers[event] = callback;\n  }\n\n  private handleOpen = () => {\n    this.eventHandlers.open?.();\n  };\n\n  handleMessage = (event: MessageEvent) => {\n    void parseMessageType(event).then((result) => {\n      if (result.success) {\n        this.eventHandlers.message?.(result.message);\n      }\n    });\n  };\n\n  private handleClose = (event: CloseEvent) => {\n    this.eventHandlers.close?.(event);\n  };\n\n  private handleError = (e: WebsocketErrorEvent) => {\n    const message = e.message ?? 'WebSocket error';\n    this.eventHandlers.error?.(new Error(message));\n  };\n\n  /**\n   * @name connect\n   * @description\n   * Connect to the websocket.\n   */\n  connect() {\n    this.socket.reconnect();\n\n    this.socket.addEventListener('open', this.handleOpen);\n    this.socket.addEventListener('message', this.handleMessage);\n    this.socket.addEventListener('close', this.handleClose);\n    this.socket.addEventListener('error', this.handleError);\n\n    return this;\n  }\n\n  /**\n   * @name disconnect\n   * @description\n   * Disconnect from the websocket.\n   */\n  disconnect() {\n    // Close socket before removing event listeners so that \"onClose\" is still called\n    this.socket?.close();\n\n    this.handleClose({ code: 1000 } as CloseEvent);\n\n    // Remove event listeners\n    this.socket.removeEventListener('open', this.handleOpen);\n    this.socket.removeEventListener('message', this.handleMessage);\n    this.socket.removeEventListener('close', this.handleClose);\n    this.socket.removeEventListener('error', this.handleError);\n  }\n\n  /**\n   * @name sendAudio\n   * @description\n   * Send audio data to the websocket.\n   */\n  sendAudio(audioBuffer: ArrayBufferLike) {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    this.socket.send(audioBuffer);\n  }\n\n  /**\n   * @name sendUserInput\n   * @description\n   * Send text data to the websocket.\n   */\n  sendUserInput(text: string) {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const json = JSON.stringify({ text, type: 'user_input' });\n\n    this.socket.send(json);\n  }\n\n  /**\n   * @name sendAssistantInput\n   * @description\n   * Send text data to the websocket for TTS.\n   */\n  sendAssistantInput(text: string) {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const json = JSON.stringify({ text, type: 'assistant_input' });\n\n    this.socket.send(json);\n  }\n\n  /**\n   * @name sendSessionSettings\n   * @description\n   * Send session settings to the websocket\n   */\n  sendSessionSettings(sessionSettings: SessionSettings) {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const snakeCaseSettings = snakecaseKeys(sessionSettings);\n\n    const json = JSON.stringify({\n      ...snakeCaseSettings,\n      type: 'session_settings',\n    });\n    this.socket.send(json);\n  }\n\n  /**\n   * @name sendToolMessage\n   * @description\n   * Send tool response to the websocket, e.g. for function calling\n   */\n  sendToolMessage(toolMessage: ToolResponse | ToolError) {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const json = JSON.stringify(toolMessage);\n\n    this.socket.send(json);\n  }\n\n  /**\n   * @name readyState\n   * @description\n   * The current ready state of the socket.\n   */\n  get readyState() {\n    return this.socket.readyState;\n  }\n\n  /**\n   * @name sendPauseAssistantMessage\n   * @description\n   * Send pause assistant message to the websocket. This pauses responses from EVI. Chat history is still saved and sent after resuming.\n   */\n  sendPauseAssistantMessage() {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const json = JSON.stringify({ type: 'pause_assistant_message' });\n\n    this.socket.send(json);\n  }\n\n  /**\n   * @name sendResumeAssistantMessage\n   * @description\n   * Send resume assistant message to the websocket. This resumes responses from EVI. Chat history sent while paused will now be sent.\n   */\n  sendResumeAssistantMessage() {\n    if (!this.socket) {\n      throw new Error('Socket is not connected.');\n    }\n\n    if (this.socket.readyState !== WebSocket.OPEN) {\n      throw new Error('Socket is not open.');\n    }\n\n    const json = JSON.stringify({ type: 'resume_assistant_message' });\n\n    this.socket.send(json);\n  }\n}\n","import type { SocketConfig } from '@/lib/create-socket-config';\n\n/**\n * @name createSocketUrl\n * @description\n * Create a new socket URL for the VoiceClient.\n * @param config - The configuration for the client.\n * @returns\n * A new socket URL.\n * @example\n * ```ts\n * const url = createSocketUrl(config);\n * ```\n */\nexport const createSocketUrl = (config: SocketConfig): string => {\n  const url = new URL(`wss://${config.hostname}`);\n\n  url.pathname = '/v0/evi/chat';\n\n  if (config.auth.type === 'accessToken') {\n    url.searchParams.set('accessToken', config.auth.value);\n  } else if (config.auth.type === 'apiKey') {\n    url.searchParams.set('apiKey', config.auth.value);\n  }\n\n  if (config.configId) {\n    url.searchParams.set('config_id', config.configId);\n  }\n\n  if (config.configVersion) {\n    url.searchParams.set('config_version', String(config.configVersion));\n  }\n\n  if (config.resumedChatGroupId) {\n    url.searchParams.set(\n      'resumed_chat_group_id',\n      String(config.resumedChatGroupId),\n    );\n  }\n\n  return url.href;\n};\n","export class SocketUnknownMessageError extends Error {\n  constructor(message?: string) {\n    super(`Unknown message type.${message ? ' ' + message : ''}`);\n    this.name = 'SocketUnknownMessageError';\n  }\n}\n\n/**\n * @name isSocketUnknownMessageError\n * @description\n * Check if an error is a SocketUnknownMessageError.\n * @param err - The error to check.\n * @returns\n * `true` if the error is a SocketUnknownMessageError.\n * @example\n * ```ts\n * if (isSocketUnknownMessageError(err)) {\n * console.error('Unknown message type');\n * }\n * ```\n */\nexport const isSocketUnknownMessageError = (\n  err: unknown,\n): err is SocketUnknownMessageError => {\n  return err instanceof SocketUnknownMessageError;\n};\n\nexport class SocketFailedToParseMessageError extends Error {\n  constructor(message?: string) {\n    super(\n      `Failed to parse message from socket.${message ? ' ' + message : ''}`,\n    );\n    this.name = 'SocketFailedToParseMessageError';\n  }\n}\n\n/**\n * @name isSocketFailedToParseMessageError\n * @description\n * Check if an error is a SocketFailedToParseMessageError.\n * @param err - The error to check.\n * @returns\n * `true` if the error is a SocketFailedToParseMessageError.\n * @example\n * ```ts\n * if (isSocketFailedToParseMessageError(err)) {\n * console.error('Failed to parse message from socket');\n * }\n * ```\n */\nexport const isSocketFailedToParseMessageError = (\n  err: unknown,\n): err is SocketFailedToParseMessageError => {\n  return err instanceof SocketFailedToParseMessageError;\n};\n","import z from 'zod';\n\nexport const AudioMessageSchema = z\n  .object({\n    type: z.literal('audio'),\n    data: z.instanceof(ArrayBuffer),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type AudioMessage = z.infer<typeof AudioMessageSchema>;\n\nexport const parseAudioMessage = async (\n  blob: Blob,\n): Promise<AudioMessage | null> => {\n  return blob\n    .arrayBuffer()\n    .then((buffer) => {\n      return {\n        type: 'audio' as const,\n        data: buffer,\n        receivedAt: new Date(),\n      };\n    })\n    .catch(() => {\n      return null;\n    });\n};\n","import z from 'zod';\n\nimport { AssistantEndMessageSchema } from './assistant-end-message';\nimport { AssistantTranscriptMessageSchema } from './assistant-message';\nimport { AudioOutputMessageSchema } from './audio-output-message';\nimport { ChatMetadataMessageSchema } from './chat-metadata-message';\nimport { JSONErrorMessageSchema } from './error-message';\nimport {\n  ToolCallSchema,\n  ToolErrorSchema,\n  ToolResponseSchema,\n} from './tool-messages';\nimport { UserInterruptionMessageSchema } from './user-interruption-message';\nimport { UserTranscriptMessageSchema } from './user-message';\n\nexport const JSONMessageSchema = z.union([\n  AudioOutputMessageSchema,\n  AssistantEndMessageSchema,\n  UserInterruptionMessageSchema,\n  UserTranscriptMessageSchema,\n  AssistantTranscriptMessageSchema,\n  JSONErrorMessageSchema,\n  ToolCallSchema,\n  ToolErrorSchema,\n  ToolResponseSchema,\n  ChatMetadataMessageSchema,\n]);\n\nexport type JSONMessage = z.infer<typeof JSONMessageSchema>;\n","import z from 'zod';\n\nexport const AssistantEndMessageSchema = z\n  .object({\n    type: z.literal('assistant_end'),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type AssistantEndMessage = z.infer<typeof AssistantEndMessageSchema>;\n","import z from 'zod';\n\nimport { TranscriptModelsSchema } from './transcript-models';\n\nexport const AssistantTranscriptMessageSchema = z\n  .object({\n    type: z.literal('assistant_message'),\n    id: z.string(),\n    message: z.object({\n      role: z.literal('assistant'),\n      content: z.string(),\n    }),\n    models: TranscriptModelsSchema,\n    from_text: z.boolean().catch(false),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type AssistantTranscriptMessage = z.infer<\n  typeof AssistantTranscriptMessageSchema\n>;\n","import z from 'zod';\n\nexport const EmotionScoresSchema = z.record(z.string(), z.number());\n\nexport type EmotionScores = z.infer<typeof EmotionScoresSchema>;\n\nexport const TranscriptModelsSchema = z.object({\n  // prosody scores are null when the message is not audio\n  // (e.g. text input from the user)\n  prosody: z\n    .object({\n      scores: EmotionScoresSchema,\n    })\n    .nullish(),\n  time: z\n    .object({\n      begin: z.number(),\n      end: z.number(),\n    })\n    .nullish(),\n});\n","import { z } from 'zod';\n\nexport const AudioOutputMessageSchema = z\n  .object({\n    type: z.literal('audio_output'),\n    id: z.string(),\n    data: z.string(),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type AudioOutputMessage = z.infer<typeof AudioOutputMessageSchema>;\n","import z from 'zod';\n\nexport const ChatMetadataMessageSchema = z\n  .object({\n    type: z.literal('chat_metadata'),\n    chat_id: z.string(),\n    chat_group_id: z.string(),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type ChatMetadataMessage = z.infer<typeof ChatMetadataMessageSchema>;\n","import { z } from 'zod';\n\nexport const JSONErrorMessageSchema = z\n  .object({\n    type: z.literal('error'),\n    code: z.string(),\n    slug: z.string(),\n    message: z.string(),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type JSONErrorMessage = z.infer<typeof JSONErrorMessageSchema>;\n","import z from 'zod';\n\nconst literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);\ntype Literal = z.infer<typeof literalSchema>;\ntype Json = Literal | { [key: string]: Json } | Json[];\nconst jsonSchema: z.ZodType<Json> = z.lazy(() =>\n  z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]),\n);\n\n// MARK: ToolCall Message\nexport const ToolCallSchema = z\n  .object({\n    type: z.literal('tool_call'),\n    tool_type: z.enum(['builtin', 'function']),\n    tool_call_id: z.string(),\n    response_required: z.boolean(),\n    name: z.string(),\n    parameters: z.string(),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type ToolCall = z.infer<typeof ToolCallSchema>;\n\n// MARK: ToolResponse Message\nexport const ToolResponseContentSchema = z.union([z.string(), jsonSchema]);\n\nexport type ToolResponseContent = z.infer<typeof ToolResponseContentSchema>;\n\nexport const ToolResponseSchema = z.object({\n  type: z.literal('tool_response'),\n  tool_call_id: z.string(),\n  content: ToolResponseContentSchema,\n  tool_name: z.string().optional(),\n  tool_type: z.enum(['builtin', 'function']).optional(),\n});\n\nexport type ToolResponse = z.infer<typeof ToolResponseSchema>;\n\n// MARK: ToolError Message\nexport const ToolErrorSchema = z.object({\n  type: z.literal('tool_error'),\n  tool_call_id: z.string(),\n  content: z.string().nullish(),\n  error: z.string(),\n  code: z.string(),\n  level: z.string(),\n});\n\nexport type ToolError = z.infer<typeof ToolErrorSchema>;\n","import z from 'zod';\n\nimport { TimeSliceSchema } from './time-slice';\n\nexport const UserInterruptionMessageSchema = z\n  .object({\n    type: z.literal('user_interruption'),\n    time: z.union([TimeSliceSchema, z.number(), z.null()]).catch(null),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type UserInterruptionMessage = z.infer<\n  typeof UserInterruptionMessageSchema\n>;\n","import { z } from 'zod';\n\nexport const TimeSliceSchema = z.object({\n  begin: z.number(),\n  end: z.number(),\n});\n\nexport type TimeSlice = z.infer<typeof TimeSliceSchema>;\n","import z from 'zod';\n\nimport { TranscriptModelsSchema } from './transcript-models';\n\nexport const UserTranscriptMessageSchema = z\n  .object({\n    type: z.literal('user_message'),\n    message: z.object({\n      role: z.literal('user'),\n      content: z.string(),\n    }),\n    models: TranscriptModelsSchema,\n    from_text: z.boolean().nullish().catch(false),\n  })\n  .transform((obj) => {\n    return Object.assign(obj, {\n      receivedAt: new Date(),\n    });\n  });\n\nexport type UserTranscriptMessage = z.infer<typeof UserTranscriptMessageSchema>;\n","export const safeJson = (\n  input: string,\n): { success: true; data: unknown } | { success: false } => {\n  try {\n    return { success: true, data: JSON.parse(input) as unknown };\n  } catch (e) {\n    return { success: false };\n  }\n};\n","import type { ZodSchema } from 'zod';\n\nimport { safeJson } from './safeJson';\n\nexport const unwrapJson = <T extends ZodSchema>(\n  input: string,\n  schema: T,\n): T['_output'] | null => {\n  const json = safeJson(input);\n\n  if (!json.success) {\n    return null;\n  }\n\n  const message = schema.safeParse(json.data);\n\n  if (!message.success) {\n    return null;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n  return message.data;\n};\n","import {\n  SocketFailedToParseMessageError,\n  SocketUnknownMessageError,\n} from './errors';\n\nimport type { AudioMessage } from '@/models/audio-message';\nimport { parseAudioMessage } from '@/models/audio-message';\nimport { type JSONMessage, JSONMessageSchema } from '@/models/json-message';\nimport { unwrapJson } from '@/utils/unwrapJson';\n\n/**\n * @name parseMessageData\n * @description\n * Parse the data of a message from the socket.\n * @param data - The data to parse.\n * @returns\n * The parsed message data.\n * @example\n * ```ts\n * const message = await parseMessageData(data);\n * ```\n */\nexport const parseMessageData = async (\n  data: unknown,\n): Promise<\n  | {\n      success: true;\n      message: JSONMessage | AudioMessage;\n    }\n  | {\n      success: false;\n      error: Error;\n    }\n> => {\n  if (data instanceof Blob) {\n    const message = await parseAudioMessage(data);\n\n    if (message) {\n      return {\n        success: true,\n        message,\n      };\n    } else {\n      return {\n        success: false,\n        error: new SocketFailedToParseMessageError(\n          `Received blob was unable to be converted to ArrayBuffer.`,\n        ),\n      };\n    }\n  }\n\n  if (typeof data !== 'string') {\n    return {\n      success: false,\n      error: new SocketFailedToParseMessageError(\n        `Expected a string but received ${typeof data}.`,\n      ),\n    };\n  }\n\n  const obj = unwrapJson(data, JSONMessageSchema);\n\n  if (obj === null) {\n    return {\n      success: false,\n      error: new SocketUnknownMessageError(\n        `Received JSON was not a known message type.`,\n      ),\n    };\n  }\n\n  return {\n    success: true,\n    message: obj,\n  };\n};\n\n/**\n * @name parseMessageType\n * @description\n * Parse the type of a message from the socket.\n * @param event - The event to parse.\n * @returns\n * The parsed message type.\n * @example\n * ```ts\n * const message = await parseMessageType(event);\n * ```\n */\nexport const parseMessageType = async (\n  event: MessageEvent,\n): Promise<\n  | {\n      success: true;\n      message: JSONMessage | AudioMessage;\n    }\n  | {\n      success: false;\n      error: Error;\n    }\n> => {\n  const data: unknown = event.data;\n  return parseMessageData(data);\n};\n","import { z } from 'zod';\n\nimport { AuthStrategySchema } from '../models/auth';\n\nexport const SocketConfigSchema = z.object({\n  // Configs that are set at connection time\n  hostname: z.string({\n    description: 'Hostname of the Hume API.',\n  }),\n  reconnectAttempts: z\n    .number({\n      description: 'Number of times to attempt to reconnect to the API.',\n    })\n    .optional()\n    .default(30),\n  debug: z\n    .boolean({\n      description: 'Enable debug mode.',\n    })\n    .optional()\n    .default(false),\n\n  // Configs that are set as query params\n  auth: AuthStrategySchema,\n  configId: z\n    .string({\n      description: 'The ID of the configuration to use.',\n    })\n    .optional(),\n  configVersion: z\n    .number({\n      description: 'The version of the configuration to use.',\n    })\n    .optional(),\n  resumedChatGroupId: z\n    .string({\n      description: 'The ID of the chat group to resume.',\n    })\n    .optional(),\n});\n\nexport type SocketConfig = z.infer<typeof SocketConfigSchema>;\n\n/**\n * @name defaultConfig\n * @description\n * The default configuration for the VoiceClient.\n * @type\n * A configuration object.\n */\nexport const defaultConfig: Omit<SocketConfig, 'auth'> = {\n  hostname: 'api.hume.ai',\n  reconnectAttempts: 30,\n  debug: false,\n};\n\n/**\n * @name createSocketConfig\n * @description\n * Create a new configuration for the VoiceClient.\n * @param config - The configuration for the client.\n * @returns\n * A new configuration instance.\n * @example\n * ```ts\n * const config = createSocketConfig({\n *  auth: {\n *   type: 'apiKey',\n *  value: 'test',\n * },\n * });\n * ```\n */\nexport const createSocketConfig = (\n  config: Pick<SocketConfig, 'auth'> & Partial<Omit<SocketConfig, 'auth'>>,\n): SocketConfig => {\n  if (!config.auth) throw new Error('Auth strategy is required.');\n\n  return SocketConfigSchema.parse({\n    ...defaultConfig,\n    ...config,\n    auth: config.auth,\n  });\n};\n","import z from 'zod';\n\nexport const AuthStrategySchema = z.union([\n  z.object({\n    type: z.literal('apiKey'),\n    value: z.string({\n      description: 'API key for the Hume API is required',\n    }),\n  }),\n  z.object({\n    type: z.literal('accessToken'),\n    value: z.string({\n      description: 'Access token for the Hume API is required',\n    }),\n  }),\n]);\n\nexport type AuthStrategy = z.infer<typeof AuthStrategySchema>;\n","export enum TTSService {\n  /** Hume's Text-To-Speech */\n  DEFAULT = 'hume_ai',\n  /** ElevenLab's Text-To-Speech */\n  ELEVEN_LABS = 'eleven_labs',\n  /** Play HT's Text-To-Speech */\n  PLAY_HT = 'play_ht',\n}\n","/**\n * @name getAudioStream\n * @description\n * Get a MediaStream with audio tracks.\n * @returns\n * A new MediaStream with audio tracks.\n */\nexport const getAudioStream = async (): Promise<MediaStream> => {\n  return navigator.mediaDevices.getUserMedia({\n    audio: {\n      echoCancellation: true,\n      noiseSuppression: true,\n      autoGainControl: true,\n    },\n    video: false,\n  });\n};\n\n/**\n * @name checkForAudioTracks\n * @description\n * Check if a MediaStream has audio tracks.\n * @param stream\n * The MediaStream to check\n */\nexport const checkForAudioTracks = (stream: MediaStream) => {\n  const tracks = stream.getAudioTracks();\n\n  if (tracks.length === 0) {\n    throw new Error('No audio tracks');\n  }\n  if (tracks.length > 1) {\n    throw new Error('Multiple audio tracks');\n  }\n  const track = tracks[0];\n  if (!track) {\n    throw new Error('No audio track');\n  }\n};\n","/**\n * Function which detects whether the function is being ran in the browser or node environment,\n * and base64 encodes the string input using the natively available method.\n *\n * @param str\n * @returns base64 encoded string\n */\nfunction base64Encode(str: string): string {\n  if (typeof Buffer === 'function') {\n    // Node.js environment\n    return Buffer.from(str).toString('base64');\n  } else if (typeof btoa === 'function') {\n    // Browser environment\n    return btoa(str);\n  } else {\n    throw new Error(\n      'Base64 encoding is not natively supported in this environment.',\n    );\n  }\n}\n\n/**\n * Fetches a new access token from the Hume API using the provided API key and Secret key.\n *\n * @param args - The arguments for the request.\n * @returns Promise that resolves to the new access token.\n * @throws If the base64 encoding fails.\n * @throws If the network request fails.\n * @example\n * ```typescript\n * async function getToken() {\n *   const accessToken = await fetchAccessToken({\n *     apiKey: 'test',\n *     secretKey: 'test',\n *   });\n *   console.log(accessToken); // Outputs the access token\n * }\n * ```\n */\nexport const fetchAccessToken = async (args: {\n  apiKey: string;\n  secretKey: string;\n  host?: string;\n}): Promise<string> => {\n  const { apiKey, secretKey, host = 'api.hume.ai' } = args;\n\n  const authString = `${apiKey}:${secretKey}`;\n  const encoded = base64Encode(authString);\n\n  const res = await fetch(`https://${host}/oauth2-cc/token`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Basic ${encoded}`,\n    },\n    body: new URLSearchParams({\n      grant_type: 'client_credentials',\n    }).toString(),\n    cache: 'no-cache',\n  });\n\n  const data = (await res.json()) as { access_token: string };\n  const accessToken = String(data['access_token']);\n\n  return accessToken;\n};\n","import z from 'zod';\n\nexport enum Channels {\n  /** Mono */\n  MONO = 1,\n  /** Stereo */\n  STEREO = 2,\n}\n\nexport enum AudioEncoding {\n  /** 16-bit signed little-endian (PCM) */\n  LINEAR16 = 'linear16',\n  /** Ogg Opus */\n  OPUS = 'opus',\n}\n\nconst AudioConfigurationSchema = z.object({\n  channels: z.nativeEnum(Channels, {\n    description: 'Number of channels in the input audio.',\n  }),\n  encoding: z.nativeEnum(AudioEncoding, {\n    description: 'Encoding of the input audio.',\n  }),\n  sampleRate: z.number({\n    description: 'Sample rate of the input audio.',\n  }),\n});\n\nconst ContextConfigurationSchema = z.object({\n  text: z.string(),\n  type: z.enum(['editable', 'persistent', 'temporary']).optional(),\n});\n\nexport const WebSearchToolSchema = z.object({\n  name: z.literal('web_search'),\n  fallback_content: z.string().nullish().catch(null),\n});\n\nexport const SessionSettingsSchema = z.object({\n  audio: AudioConfigurationSchema.optional(),\n  context: ContextConfigurationSchema.optional(),\n  languageModelApiKey: z.string().optional(),\n  customSessionId: z.string().optional(),\n  systemPrompt: z.string().optional(),\n  builtin_tools: z.array(z.union([WebSearchToolSchema, z.null()])).optional(),\n});\n\nexport type SessionSettings = z.infer<typeof SessionSettingsSchema>;\n","export enum LanguageModelOption {\n  CLAUDE_3_OPUS = 'CLAUDE_3_OPUS',\n  CLAUDE_3_SONNET = 'CLAUDE_3_SONNET',\n  CLAUDE_3_HAIKU = 'CLAUDE_3_HAIKU',\n  CLAUDE_21 = 'CLAUDE_21',\n  CLAUDE_INSTANT_12 = 'CLAUDE_INSTANT_12',\n  GPT_4_TURBO_PREVIEW = 'GPT_4_TURBO_PREVIEW',\n  GPT_35_TURBO_0125 = 'GPT_35_TURBO_0125',\n  GPT_35_TURBO = 'GPT_35_TURBO',\n  FIREWORKS_MIXTRAL_8X7B = 'FIREWORKS_MIXTRAL_8X7B',\n}\n"],"mappings":"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","names":["MimeType","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","z","TTSService","z","Channels","AudioEncoding","LanguageModelOption"]}