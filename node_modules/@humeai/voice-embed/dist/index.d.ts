import { SocketConfig, UserTranscriptMessage, AssistantTranscriptMessage } from '@humeai/voice';
export { AssistantTranscriptMessage, ChatMetadataMessage, EmotionScores, JSONMessage, LanguageModelOption, SocketConfig, ToolCall, ToolError, ToolResponse, UserTranscriptMessage } from '@humeai/voice';
import { z } from 'zod';

type EmbeddedVoiceConfig = {
    rendererUrl: string;
    iframeTitle?: string;
} & SocketConfig;
type TranscriptMessageHandler = (message: UserTranscriptMessage | AssistantTranscriptMessage) => void;
type CloseHandler = () => void;
declare class EmbeddedVoice {
    private iframe;
    private isMounted;
    private managedContainer;
    private config;
    private onMessage;
    private onClose;
    private openOnMount;
    private constructor();
    static create({ rendererUrl, onMessage, onClose, openOnMount, ...config }: Partial<EmbeddedVoiceConfig> & {
        onMessage?: TranscriptMessageHandler;
        onClose?: CloseHandler;
        openOnMount?: boolean;
    } & NonNullable<Pick<EmbeddedVoiceConfig, 'auth'>>): EmbeddedVoice;
    mount(container?: HTMLElement): () => void;
    private createContainer;
    private createIframe;
    private messageHandler;
    openEmbed(): void;
    private sendConfigObject;
    private sendWindowSize;
    private sendMessageToFrame;
    private showIframe;
    private hideIframe;
    private resizeIframe;
}

/**
                                                                         
            client                                      frame
                                                                         
 ┌───────────────────────────┐
 │       mount iframe        │ ───────────▶
 └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │      iframe is ready      │
                                            └───────────────────────────┘
 ┌───────────────────────────┐
 │        send config        │ ───────────▶
 └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │      widget is open       │
                                            └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │    widget is collapsed    │
                                            └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │    widget is minimized    │
                                            └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │    transcript message     │
                                            └───────────────────────────┘
                                            ┌───────────────────────────┐
                               ◀─────────── │       resize window       │
                                            └───────────────────────────┘
 ┌───────────────────────────┐
 │      unmount iframe       │ ───────────▶
 └───────────────────────────┘
                                                                       */

declare const WindowDimensionsSchema: z.ZodObject<{
    width: z.ZodNumber;
    height: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    width: number;
    height: number;
}, {
    width: number;
    height: number;
}>;
type WindowDimensions = z.infer<typeof WindowDimensionsSchema>;
declare const ClientToFrameActionSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"update_config">;
    payload: z.ZodObject<{
        hostname: z.ZodString;
        reconnectAttempts: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
        debug: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
        auth: z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"apiKey">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "apiKey";
            value: string;
        }, {
            type: "apiKey";
            value: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"accessToken">;
            value: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            type: "accessToken";
            value: string;
        }, {
            type: "accessToken";
            value: string;
        }>]>;
        configId: z.ZodOptional<z.ZodString>;
        configVersion: z.ZodOptional<z.ZodNumber>;
        resumedChatGroupId: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        hostname: string;
        reconnectAttempts: number;
        debug: boolean;
        auth: {
            type: "apiKey";
            value: string;
        } | {
            type: "accessToken";
            value: string;
        };
        configId?: string | undefined;
        configVersion?: number | undefined;
        resumedChatGroupId?: string | undefined;
    }, {
        hostname: string;
        auth: {
            type: "apiKey";
            value: string;
        } | {
            type: "accessToken";
            value: string;
        };
        reconnectAttempts?: number | undefined;
        debug?: boolean | undefined;
        configId?: string | undefined;
        configVersion?: number | undefined;
        resumedChatGroupId?: string | undefined;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "update_config";
    payload: {
        hostname: string;
        reconnectAttempts: number;
        debug: boolean;
        auth: {
            type: "apiKey";
            value: string;
        } | {
            type: "accessToken";
            value: string;
        };
        configId?: string | undefined;
        configVersion?: number | undefined;
        resumedChatGroupId?: string | undefined;
    };
}, {
    type: "update_config";
    payload: {
        hostname: string;
        auth: {
            type: "apiKey";
            value: string;
        } | {
            type: "accessToken";
            value: string;
        };
        reconnectAttempts?: number | undefined;
        debug?: boolean | undefined;
        configId?: string | undefined;
        configVersion?: number | undefined;
        resumedChatGroupId?: string | undefined;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"cancel">;
}, "strip", z.ZodTypeAny, {
    type: "cancel";
}, {
    type: "cancel";
}>, z.ZodObject<{
    type: z.ZodLiteral<"expand_widget_from_client">;
    payload: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "expand_widget_from_client";
    payload: {
        width: number;
        height: number;
    };
}, {
    type: "expand_widget_from_client";
    payload: {
        width: number;
        height: number;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"send_window_size">;
    payload: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "send_window_size";
    payload: {
        width: number;
        height: number;
    };
}, {
    type: "send_window_size";
    payload: {
        width: number;
        height: number;
    };
}>]>;
type ClientToFrameAction = z.infer<typeof ClientToFrameActionSchema>;
declare const parseClientToFrameAction: (data: unknown) => Promise<ClientToFrameAction>;
declare const FrameToClientActionSchema: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"expand_widget">;
}, "strip", z.ZodTypeAny, {
    type: "expand_widget";
}, {
    type: "expand_widget";
}>, z.ZodObject<{
    type: z.ZodLiteral<"collapse_widget">;
}, "strip", z.ZodTypeAny, {
    type: "collapse_widget";
}, {
    type: "collapse_widget";
}>, z.ZodObject<{
    type: z.ZodLiteral<"minimize_widget">;
}, "strip", z.ZodTypeAny, {
    type: "minimize_widget";
}, {
    type: "minimize_widget";
}>, z.ZodObject<{
    type: z.ZodLiteral<"widget_iframe_is_ready">;
}, "strip", z.ZodTypeAny, {
    type: "widget_iframe_is_ready";
}, {
    type: "widget_iframe_is_ready";
}>, z.ZodObject<{
    type: z.ZodLiteral<"transcript_message">;
    payload: z.ZodUnion<[z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"user_message">;
        message: z.ZodObject<{
            role: z.ZodLiteral<"user">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            role: "user";
            content: string;
        }, {
            role: "user";
            content: string;
        }>;
        models: z.ZodObject<{
            prosody: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                scores: Record<string, number>;
            }, {
                scores: Record<string, number>;
            }>>>;
            time: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                begin: z.ZodNumber;
                end: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                begin: number;
                end: number;
            }, {
                begin: number;
                end: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        }, {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        }>;
        from_text: z.ZodCatch<z.ZodOptional<z.ZodNullable<z.ZodBoolean>>>;
    }, "strip", z.ZodTypeAny, {
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: boolean | null | undefined;
    }, {
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    }>, {
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: boolean | null | undefined;
    } & {
        receivedAt: Date;
    }, {
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    }>, z.ZodEffects<z.ZodObject<{
        type: z.ZodLiteral<"assistant_message">;
        id: z.ZodString;
        message: z.ZodObject<{
            role: z.ZodLiteral<"assistant">;
            content: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            role: "assistant";
            content: string;
        }, {
            role: "assistant";
            content: string;
        }>;
        models: z.ZodObject<{
            prosody: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                scores: z.ZodRecord<z.ZodString, z.ZodNumber>;
            }, "strip", z.ZodTypeAny, {
                scores: Record<string, number>;
            }, {
                scores: Record<string, number>;
            }>>>;
            time: z.ZodOptional<z.ZodNullable<z.ZodObject<{
                begin: z.ZodNumber;
                end: z.ZodNumber;
            }, "strip", z.ZodTypeAny, {
                begin: number;
                end: number;
            }, {
                begin: number;
                end: number;
            }>>>;
        }, "strip", z.ZodTypeAny, {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        }, {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        }>;
        from_text: z.ZodCatch<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text: boolean;
    }, {
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    }>, {
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text: boolean;
    } & {
        receivedAt: Date;
    }, {
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    }>]>;
}, "strip", z.ZodTypeAny, {
    type: "transcript_message";
    payload: ({
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: boolean | null | undefined;
    } & {
        receivedAt: Date;
    }) | ({
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text: boolean;
    } & {
        receivedAt: Date;
    });
}, {
    type: "transcript_message";
    payload: {
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    } | {
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: unknown;
    };
}>, z.ZodObject<{
    type: z.ZodLiteral<"resize_frame">;
    payload: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "resize_frame";
    payload: {
        width: number;
        height: number;
    };
}, {
    type: "resize_frame";
    payload: {
        width: number;
        height: number;
    };
}>]>;
type FrameToClientAction = z.infer<typeof FrameToClientActionSchema>;
declare const EXPAND_WIDGET_ACTION: {
    type: "expand_widget";
};
declare const COLLAPSE_WIDGET_ACTION: {
    type: "collapse_widget";
};
declare const MINIMIZE_WIDGET_ACTION: {
    type: "minimize_widget";
};
declare const WIDGET_IFRAME_IS_READY_ACTION: {
    type: "widget_iframe_is_ready";
};
declare const TRANSCRIPT_MESSAGE_ACTION: (message: UserTranscriptMessage | AssistantTranscriptMessage) => {
    type: "transcript_message";
    payload: ({
        type: "user_message";
        message: {
            role: "user";
            content: string;
        };
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text?: boolean | null | undefined;
    } & {
        receivedAt: Date;
    }) | ({
        type: "assistant_message";
        message: {
            role: "assistant";
            content: string;
        };
        id: string;
        models: {
            prosody?: {
                scores: Record<string, number>;
            } | null | undefined;
            time?: {
                begin: number;
                end: number;
            } | null | undefined;
        };
        from_text: boolean;
    } & {
        receivedAt: Date;
    });
};
declare const RESIZE_FRAME_ACTION: (dimensions: {
    width: number;
    height: number;
}) => {
    type: "resize_frame";
    payload: {
        width: number;
        height: number;
    };
};

export { COLLAPSE_WIDGET_ACTION, type CloseHandler, EXPAND_WIDGET_ACTION, EmbeddedVoice, type EmbeddedVoiceConfig, type FrameToClientAction, MINIMIZE_WIDGET_ACTION, RESIZE_FRAME_ACTION, TRANSCRIPT_MESSAGE_ACTION, type TranscriptMessageHandler, WIDGET_IFRAME_IS_READY_ACTION, type WindowDimensions, parseClientToFrameAction };
