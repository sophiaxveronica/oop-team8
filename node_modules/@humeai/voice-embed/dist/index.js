"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  COLLAPSE_WIDGET_ACTION: () => COLLAPSE_WIDGET_ACTION,
  EXPAND_WIDGET_ACTION: () => EXPAND_WIDGET_ACTION,
  EmbeddedVoice: () => EmbeddedVoice,
  LanguageModelOption: () => import_voice3.LanguageModelOption,
  MINIMIZE_WIDGET_ACTION: () => MINIMIZE_WIDGET_ACTION,
  RESIZE_FRAME_ACTION: () => RESIZE_FRAME_ACTION,
  TRANSCRIPT_MESSAGE_ACTION: () => TRANSCRIPT_MESSAGE_ACTION,
  WIDGET_IFRAME_IS_READY_ACTION: () => WIDGET_IFRAME_IS_READY_ACTION,
  parseClientToFrameAction: () => parseClientToFrameAction
});
module.exports = __toCommonJS(src_exports);

// src/lib/embed.ts
var import_voice2 = require("@humeai/voice");

// src/lib/embed-messages.ts
var import_voice = require("@humeai/voice");
var import_zod = require("zod");
var WindowDimensionsSchema = import_zod.z.object({
  width: import_zod.z.number(),
  height: import_zod.z.number()
});
var ClientToFrameActionSchema = import_zod.z.union([
  import_zod.z.object({
    type: import_zod.z.literal("update_config"),
    payload: import_voice.SocketConfigSchema
  }),
  import_zod.z.object({
    type: import_zod.z.literal("cancel")
  }),
  import_zod.z.object({
    type: import_zod.z.literal("expand_widget_from_client"),
    payload: WindowDimensionsSchema
  }),
  import_zod.z.object({
    type: import_zod.z.literal("send_window_size"),
    payload: WindowDimensionsSchema
  })
]);
var UPDATE_CONFIG_ACTION = (config) => ({
  type: "update_config",
  payload: config
});
var EXPAND_FROM_CLIENT_ACTION = (dimensions) => ({
  type: "expand_widget_from_client",
  payload: dimensions
});
var SEND_WINDOW_SIZE_ACTION = (dimensions) => ({
  type: "send_window_size",
  payload: dimensions
});
var parseClientToFrameAction = (data) => {
  return new Promise((resolve, reject) => {
    try {
      const value = ClientToFrameActionSchema.parse(data);
      resolve(value);
    } catch (error) {
      reject(error);
    }
  });
};
var FrameToClientActionSchema = import_zod.z.union([
  import_zod.z.object({
    type: import_zod.z.literal("expand_widget")
  }),
  import_zod.z.object({
    type: import_zod.z.literal("collapse_widget")
  }),
  import_zod.z.object({
    type: import_zod.z.literal("minimize_widget")
  }),
  import_zod.z.object({
    type: import_zod.z.literal("widget_iframe_is_ready")
  }),
  import_zod.z.object({
    type: import_zod.z.literal("transcript_message"),
    payload: import_zod.z.union([
      import_voice.UserTranscriptMessageSchema,
      import_voice.AssistantTranscriptMessageSchema
    ])
  }),
  import_zod.z.object({
    type: import_zod.z.literal("resize_frame"),
    payload: import_zod.z.object({
      width: import_zod.z.number(),
      height: import_zod.z.number()
    })
  })
]);
var EXPAND_WIDGET_ACTION = {
  type: "expand_widget"
};
var COLLAPSE_WIDGET_ACTION = {
  type: "collapse_widget"
};
var MINIMIZE_WIDGET_ACTION = {
  type: "minimize_widget"
};
var WIDGET_IFRAME_IS_READY_ACTION = {
  type: "widget_iframe_is_ready"
};
var TRANSCRIPT_MESSAGE_ACTION = (message) => {
  return {
    type: "transcript_message",
    payload: message
  };
};
var RESIZE_FRAME_ACTION = (dimensions) => {
  return {
    type: "resize_frame",
    payload: {
      width: dimensions.width,
      height: dimensions.height
    }
  };
};

// src/lib/embed.ts
var EmbeddedVoice = class _EmbeddedVoice {
  iframe;
  isMounted = false;
  managedContainer = null;
  config;
  onMessage;
  onClose;
  openOnMount;
  constructor({
    onMessage = () => {
    },
    onClose = () => {
    },
    openOnMount,
    ...config
  }) {
    this.config = config;
    this.iframe = this.createIframe(config);
    this.onMessage = onMessage;
    this.onClose = onClose;
    this.openOnMount = openOnMount ?? false;
    this.messageHandler = this.messageHandler.bind(this);
    this.messageHandler = this.messageHandler.bind(this);
  }
  static create({
    rendererUrl,
    onMessage,
    onClose,
    openOnMount,
    ...config
  }) {
    const parsedConfig = (0, import_voice2.createSocketConfig)(config);
    return new _EmbeddedVoice({
      rendererUrl: rendererUrl ?? "https://voice-widget.hume.ai",
      onMessage,
      onClose,
      openOnMount,
      ...parsedConfig
    });
  }
  mount(container) {
    const messageHandler = (event) => {
      this.messageHandler(event);
    };
    const resizeHandler = () => {
      this.sendWindowSize();
    };
    const el = container ?? this.createContainer();
    this.managedContainer = el;
    try {
      window.addEventListener("message", messageHandler);
      window.addEventListener("resize", resizeHandler);
      el.appendChild(this.iframe);
      this.isMounted = true;
    } catch (e) {
      this.isMounted = false;
    }
    const unmount = () => {
      try {
        window.removeEventListener("message", messageHandler);
        window.removeEventListener("resize", resizeHandler);
        this.iframe.remove();
        this.isMounted = false;
      } catch (e) {
        this.isMounted = true;
      }
      if (!container) {
        el.remove();
      }
    };
    return unmount;
  }
  createContainer() {
    const div = document.createElement("div");
    Object.assign(div.style, {
      background: "transparent",
      position: "fixed",
      bottom: "0",
      right: "0",
      margin: "24px",
      zIndex: "999999",
      fontSize: "0px",
      pointerEvents: "none"
    });
    div.id = "hume-embedded-voice-container";
    document.body.appendChild(div);
    return div;
  }
  createIframe({ rendererUrl, iframeTitle }) {
    const el = document.createElement("iframe");
    Object.assign(el.style, {
      backgroundColor: "transparent",
      backgroundImage: "none",
      border: "none",
      height: "0px",
      width: "0px",
      opacity: "0"
    });
    el.id = "hume-embedded-voice";
    el.src = `${rendererUrl}`;
    el.setAttribute("title", iframeTitle ?? "Hume Empathic Voice Widget");
    el.setAttribute("frameborder", "0");
    el.setAttribute("allowtransparency", "true");
    el.setAttribute("scrolling", "no");
    el.setAttribute("allow", "microphone");
    if (el.contentWindow) {
      el.contentWindow.document.documentElement.style.backgroundColor = "transparent";
      el.contentWindow.document.body.style.backgroundColor = "transparent";
    }
    return el;
  }
  messageHandler(event) {
    if (!this.iframe) {
      return;
    }
    if (event.origin !== new URL(this.iframe.src).origin) {
      return;
    }
    const action = FrameToClientActionSchema.safeParse(event.data);
    if (!action.success) {
      return;
    }
    switch (action.data.type) {
      case WIDGET_IFRAME_IS_READY_ACTION.type: {
        this.showIframe();
        this.sendConfigObject();
        this.sendWindowSize();
        if (this.openOnMount) {
          this.openEmbed();
        }
        break;
      }
      case "resize_frame": {
        this.resizeIframe(action.data.payload);
        break;
      }
      case "transcript_message": {
        this.onMessage(action.data.payload);
        break;
      }
      case "collapse_widget": {
        this.onClose();
        break;
      }
    }
  }
  openEmbed() {
    const action = EXPAND_FROM_CLIENT_ACTION({
      width: window.screen.availWidth,
      height: window.screen.availHeight
    });
    this.sendMessageToFrame(action);
  }
  sendConfigObject() {
    const action = UPDATE_CONFIG_ACTION(this.config);
    this.sendMessageToFrame(action);
  }
  sendWindowSize() {
    const action = SEND_WINDOW_SIZE_ACTION({
      width: window.screen.availWidth,
      height: window.screen.availHeight
    });
    this.sendMessageToFrame(action);
  }
  sendMessageToFrame(action) {
    const frame = this.iframe;
    if (!frame.contentWindow) {
      return;
    }
    frame.contentWindow.postMessage(action, new URL(frame.src).origin);
  }
  showIframe() {
    this.iframe.style.opacity = "1";
    if (this.managedContainer) {
      this.managedContainer.style.pointerEvents = "all";
    }
  }
  hideIframe() {
    this.iframe.style.opacity = "0";
    if (this.managedContainer) {
      this.managedContainer.style.pointerEvents = "none";
    }
  }
  resizeIframe({ width, height }) {
    this.iframe.style.width = `${width}px`;
    this.iframe.style.height = `${height}px`;
  }
};

// src/index.ts
var import_voice3 = require("@humeai/voice");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  COLLAPSE_WIDGET_ACTION,
  EXPAND_WIDGET_ACTION,
  EmbeddedVoice,
  LanguageModelOption,
  MINIMIZE_WIDGET_ACTION,
  RESIZE_FRAME_ACTION,
  TRANSCRIPT_MESSAGE_ACTION,
  WIDGET_IFRAME_IS_READY_ACTION,
  parseClientToFrameAction
});
//# sourceMappingURL=index.js.map